import { AppBar, Box, Button, Container, createTheme, CssBaseline, FormControl, FormHelperText, InputLabel, MenuItem, Select, SelectChangeEvent, Stack, ThemeProvider, Toolbar, Typography } from '@mui/material'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { PuzzleBoard } from '../models/models'
import { calculatePuzzle, testCalculate } from '../services/puzzleCalculator'
import { clearBoard, drawPuzzleBoard } from '../services/puzzlePainter'
import { createPuzzleBoard, getAllPuzzles, PuzzleData } from '../services/puzzleService'

const theme = createTheme();

export interface IHomeProps {
  puzzleData: PuzzleData[];
}

const Home: NextPage<IHomeProps> = (props: IHomeProps) => {
  const [puzzle, setPuzzle] = useState<string>("");

  const calculate = () => {
    var canvas = document.getElementById('mycanvas') as HTMLCanvasElement;

    // Make sure we don't execute when canvas isn't supported
    if (canvas.getContext) {

      // use getContext to use the canvas for drawing
      var ctx = canvas.getContext('2d') as CanvasRenderingContext2D;
      const puzzleData = props.puzzleData.find(x => x.name == puzzle)

      if (puzzleData) {
        clearBoard(ctx);
        const newBoard = createPuzzleBoard(puzzleData);

        const currentCoordinates = newBoard.boardDatas[0][0].coordinates;
        const updatedBoard = calculatePuzzle(currentCoordinates, newBoard)
        drawPuzzleBoard(updatedBoard, ctx);
      }
    } else {
      alert('You need Safari or Firefox 1.5+ to see this demo.');
    }
  }

  const handleChange = (event: SelectChangeEvent<string>) => {
    setPuzzle(event.target.value);

    var canvas = document.getElementById('mycanvas') as HTMLCanvasElement;

    // Make sure we don't execute when canvas isn't supported
    if (canvas.getContext) {

      // use getContext to use the canvas for drawing
      var ctx = canvas.getContext('2d') as CanvasRenderingContext2D;
      const puzzleData = props.puzzleData.find(x => x.name == event.target.value)

      if (puzzleData) {
        clearBoard(ctx);
        const newBoard = createPuzzleBoard(puzzleData);
        drawPuzzleBoard(newBoard, ctx);
      }
    } else {
      alert('You need Safari or Firefox 1.5+ to see this demo.');
    }
  }

  return (
    <ThemeProvider theme={theme}>
      <Head>
        <title>Ni no Kuni: Cross Worlds Puzzle Solver</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CssBaseline />
      <AppBar position="fixed">
        <Toolbar>
          <Typography variant="h6" color="inherit" noWrap>
            Ni no Kuni: Cross Worlds Puzzle Solver
          </Typography>
        </Toolbar>
      </AppBar>

      <main>
        <Box
          sx={{
            bgcolor: 'background.paper',
            pt: 8,
            pb: 6,
          }}
        >
          <Container maxWidth="sm">
            <Typography variant="h4" align="center" paragraph>
              Choose a puzzle and press calculate button
            </Typography>
            <Stack
              sx={{ pt: 4 }}
              direction="row"
              spacing={2}
              justifyContent="center"
            >
              <FormControl sx={{ m: 1, minWidth: 120 }}>
                <InputLabel id="demo-simple-select-helper-label">Puzzle</InputLabel>
                <Select
                  labelId="demo-simple-select-helper-label"
                  id="demo-simple-select-helper"
                  value={puzzle}
                  label="Puzzle"
                  onChange={handleChange}
                >
                  {props.puzzleData.map(p => {
                    return (<MenuItem key={p.name} value={p.name}>{p.name}</MenuItem>)
                  })}
                </Select>
              </FormControl>

              <Button onClick={calculate} variant="contained">Calculate</Button>
            </Stack>

            <canvas id="mycanvas" width="450" height="450" style={{ border: '1px solid black', marginBottom: 5, marginTop: 10 }}></canvas>
          </Container>
        </Box>

        <div style={{ margin: 15, display: 'flex', flexDirection: 'column' }}>

        </div>
      </main>


    </ThemeProvider>
  )
}

export async function getStaticProps() {
  const puzzleData = await getAllPuzzles();

  return { props: { puzzleData } };
}

export default Home
